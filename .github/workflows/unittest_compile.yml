on: [push, pull_request]

env:
  BUILD_TYPE: Debug

jobs:
  ubuntu:
    name: Ubuntu 18.04 GCC v7.5.0
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout submodules and DisC++
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build ${{runner.workspace}}/build
  windows-vs2019-msvc:
    name: Windows VS2019 MSVC (v19.27.29111.0)
    runs-on: windows-2019
    
    defaults:
      run:
        shell: cmd
    
    steps:
      - name: Checkout submodules and DisC++
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
        
      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/DisCPP/build

      #- name: Install VS2019 Build Tools (v16.7.2.0) via Chocolatey
      #  uses: crazy-max/ghaction-chocolatey@v1.3.0
      #  with:
      #    args: install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --passive" --version 16.7.2.0 -y
      #- name: Setup VS Build Tools Environment
      #  run: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsx86_amd64.bat"'

      - name: Install OpenSSL from Chocolatey
        uses: crazy-max/ghaction-chocolatey@v1.3.0
        with:
          args: install openssl -y

      - uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: CMake Configure
        working-directory: ${{runner.workspace}}/DisCPP/build
        run: cmake ${{runner.workspace}}/DisCPP -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
      
      - name: CMake Compile
        working-directory: ${{runner.workspace}}/DisCPP/build
        run: cmake --build . --parallel 10
  windows-clang:
    name: Windows Clang (v10.0.0)
    runs-on: windows-2019
    
    defaults:
      run:
        shell: cmd
    
    env:
      CC: clang
      CXX: clang++
    
    steps:
      - name: Checkout submodules and DisC++
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
        
      - name: Create Build Folder
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/DisCPP/build

      - name: Install Clang from Chocolatey
        # You may pin to the exact commit or the version.
        # uses: crazy-max/ghaction-chocolatey@b6061d587628735be315d74358228b83a7dba9a7
        uses: crazy-max/ghaction-chocolatey@v1.3.0
        with:
          # Arguments to pass to Chocolatey
          args: install llvm --version 10.0.0 -y
        
      - name: Install OpenSSL from Chocolatey
        # You may pin to the exact commit or the version.
        # uses: crazy-max/ghaction-chocolatey@b6061d587628735be315d74358228b83a7dba9a7
        uses: crazy-max/ghaction-chocolatey@v1.3.0
        with:
          # Arguments to pass to Chocolatey
          args: install openssl -y
        
      - name: CMake Configure
        working-directory: ${{runner.workspace}}/DisCPP/build
        run: cmake ${{runner.workspace}}/DisCPP -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang.exe" -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang++.exe"
      
      - name: CMake Compile
        working-directory: ${{runner.workspace}}/DisCPP/build
        run: cmake --build . --parallel 10
